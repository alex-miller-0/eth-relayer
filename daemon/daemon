#!/usr/bin/env node
// Starts a daemon process to listen to all relayed messages on a particular
// host (e.g. http://mainnet.infura.io). These are found as "gateway" in
// networks.js
const Promise = require('bluebird').Promise;
const Web3 = require('Web3');
const signing = require('./lib/signing.js');
const query = require('./lib/query.js');
const util = require('./lib/util.js');
const server = require('../secrets.json').server;
const request = require('request');
// Setup a web3 websocket instance
const wsHost = process.argv[2];
const web3ws = new Web3(new Web3.providers.WebsocketProvider(wsHost));
// const web3rpc = new Web3(new Web3.providers.HttpProvider(rpcHost));

// Cached messages that have been played
let cache = [];

// Signer should be the default account (this needs to be unlocked)
const signer = signing.getAddr(0);
query.setSender(signer);

// Subscribe to all Deposit events on this chain.
const TrustedRelayAbi = require('../build/contracts/TrustedRelay.json').abi;
// const rpcContract = new web3rpc.eth.Contract(TrustedRelayAbi, process.argv[4]);
const wsContract = new web3ws.eth.Contract(TrustedRelayAbi, process.argv[4]);
const addr = wsContract.options.address

const depositSub = wsContract.events.Deposit({}, (err, evt) => {
  if (err) throw err;
  console.log(`##${new Date().getTime()}## ${wsHost} ${wsContract.address} Deposit event: ${evt}`);
})
.on('error', (err) => { throw err; })
.on('data', (evt) => {
  const d = evt.returnValues;
  let tmp = {
    sender: d.sender,
    oldToken: d.token,
    toChain: d.toChain,
    fromChain: addr,
    amount: d.amount,
    fee: d.fee,
    timestamp: d.tsIncl,
  };
  query.getSig(evt.transactionHash, web3ws)
  .then((sig) => {
    tmp.sig = sig;
    return deposit(tmp)
  })
  .then(() => {
    process.send({ type: 'deposit', to: d.toChain, body: tmp });
    cache.push(d['0']);
  })
  .catch((err) => { throw err; })
})

// Subscribe to all relays on this chain
const relaySub = wsContract.events.RelayedDeposit({}, (err, evt) => {
  if (err) throw err;
  console.log(`##${new Date().getTime()}## ${wsHost} RelayedDeposit event: ${JSON.stringify(evt)}`);
})

// Listen for messages
process.on('message', (m) => {
  if (m.type == 'deposit') {
    // Deposit message is played to the destination chain
    console.log('Looking for mapping on deposit.')
    query.findTokenMapping(m.body.fromChain, m.body.oldToken, wsContract)
    .then((mapping) => {
      if (!mapping) {
        // If there's no mapping, we need to create a token on this chain. We
        // need the code at the contract first.
        const mBody = { contractAddr: m.body.oldToken, relay: m.body };
        process.send({ type: 'tokenReq', to: m.body.fromChain, from: addr, body: mBody });
        return;
      } else {
        return query.relayMessage(m.to, m.body, wsContract)
        .then((receipt) => {
          console.log('Relayed message transferring', receipt);
        })
        .catch((err) => { throw err; })
      }
    })
    .then(() => { })
    .catch((err) => { throw err; })
  } else if (m.type == 'tokenReq') {
    // If the destination can't find a mapping, it will send a message back to
    // the origin and ask for token info with which it can deploy a new token.
    query.getToken(m.body.contractAddr, web3ws)
    .then((token) => {
      const body = { token: token, oldTokenAddr: m.body.contractAddr,
        relay: m.body.relay };
      process.send({ type: 'tokenRes', to: m.from, from: addr, body: body })
    })
  } else if (m.type == 'tokenRes') {
    let newToken;
    let newTokenAddr;
    // If the destination chain needs to deploy a token to set a mapping, it
    // will get token info, deploy, and then create a mapping.
    query.createContract(m.body.token, signer, addr, web3ws)
    .then((_newTokenAddr) => {
      console.log('token created', _newTokenAddr);
      newTokenAddr = _newTokenAddr;
      // Once the token is created, create the mapping
      return query.createTokenMapping(m.body.oldTokenAddr, newTokenAddr, m.from, wsContract)
    })
    .then((mapping) => {
      newToken = mapping;
      // Once the mapping is created, move the tokens
      return query.relayMessage(m.to, m.body.relay, wsContract)
    })
    .then((receipt) => {
      console.log('Relayed message transferring ', newToken);
      // Tell the other chain to make a mapping mirroring this one
      const mBody = { oldTokenAddr: newTokenAddr, newTokenAddr: m.body.oldTokenAddr };
      process.send({ type: 'mapping', to: m.from, from: addr, body: mBody })
    })
    .catch((err) => { throw err; })
  } else if (m.type == 'mapping') {
    query.createTokenMapping(m.body.oldTokenAddr, m.body.newTokenAddr, m.from, wsContract)
    .then(() => {
      console.log(`${addr} created new token mapping for ${m.from}->${m.body.oldTokenAddr}->${m.body.newTokenAddr}`)
    })
  }

})

function deposit(evt) {
  return new Promise((resolve, reject) => {
    console.log('sending evt', evt)
    request({
      method: 'POST',
      uri: `${server}/deposit`,
      form: evt
    }, (err, res) => {
      console.log('got a result!')
      if (err) return reject(err);
      return resolve(true);
    })
  })
}

// Keep alive
let alive;
setInterval(() => {
  alive = new Date().getTime();
  // Save cache into database
}, 1000)
