#!/usr/bin/env node
// Starts a daemon process to listen to all relayed messages on a particular
// host (e.g. http://mainnet.infura.io). These are found as "gateway" in
// networks.js
const Promise = require('bluebird').Promise;
const Web3 = require('Web3');
const signing = require('./lib/signing.js');

// Setup a web3 websocket instance
const host = process.argv[2];
const web3 = new Web3(new Web3.providers.WebsocketProvider(host));

// Cached messages that have been played
let cache = [];

// Signer should be the default account (this needs to be unlocked)
const signer = signing.getAddr(0);

// Subscribe to all Deposit events on this chain.
const TrustedRelayAbi = require('../build/contracts/TrustedRelay.json').abi;
const contract = new web3.eth.Contract(TrustedRelayAbi, process.argv[3]);
const addr = contract.options.address

const depositSub = contract.events.Deposit({}, (err, evt) => {
  if (err) throw err;
  console.log(`##${new Date().getTime()}## ${host} ${contract.address} Deposit event: ${evt}`);
})
.on('error', (err) => { throw err; })
.on('data', (evt) => {
  const d = evt.returnValues;
  let tmp = {
    sender: d.sender,
    oldToken: d.token,
    toChain: d.toChain,
    fromChain: addr,
    amount: d.amount,
    fee: d.fee,
    timestamp: d.tsIncl,
    sig: {
      m: d['0'],
      v: d['3'],
      r: d['1'],
      s: d['2']
    }
  };
  process.send(tmp);
  cache.push(d['0']);
})

// Subscribe to all relays on this chain
const relaySub = contract.events.RelayedDeposit({}, (err, evt) => {
  if (err) throw err;
  console.log(`##${new Date().getTime()}## ${host} ${contract.address} RelayedDeposit event: ${evt}`);
})

// Listen for messages
process.on('message', (m) => {
  if (m.toChain != addr) {
    console.error(`${addr} WARNING: Got message intended for ${m.toChain}`)
  }
  console.log('got message from pool', m);
  contract.methods.relayDeposit(m.sig.m, m.sig.v, m.sig.r, m.sig.s,
    [m.token, m.sender], m.amount, m.fromChain, [m.fee, m.timestamp])
    .send({ from: signer, gas: 300000 })
    .then((receipt) => {
      console.log('sent relay?', receipt)
    })
})

// Keep alive
let alive;
setInterval(() => {
  alive = new Date().getTime();
  // Save cache into database
}, 1000)
